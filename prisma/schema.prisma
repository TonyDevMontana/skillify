// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id      String   @id @default(uuid())
  name    String
  email   String   @unique
  creator Creator?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
}

model Creator {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  name        String
  pictureUrl  String?
  profession  String   @default("Creator")
  linkedInUrl String?
  about       String?
  courses     Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Course {
  id           String    @id @default(uuid())
  creatorId    String
  creator      Creator   @relation(fields: [creatorId], references: [id])
  name         String
  thumbnailUrl String?
  price        Int
  about        String?
  published    Boolean   @default(false)
  chapters     Chapter[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([creatorId])
}

model Chapter {
  id          String  @id @default(uuid())
  courseId    String
  course      Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  name        String
  description String?
  visible     Boolean @default(false)
  freePreview Boolean @default(false)
  order       Int
  video       Video?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId, order])
}

model Video {
  id        String  @id @default(uuid())
  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  status     String
  assetId    String? @unique
  playbackId String? @unique
  uploadId   String  @unique
  duration   Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId, uploadId, assetId])
}
